// Mocks generated by Mockito 5.0.16 from annotations
// in guardians_of_nature/test/data/battle/use_cases/attack_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:guardians_of_nature/data/battle/entities/battle.dart' as _i4;
import 'package:guardians_of_nature/data/battle/repositories/battles_repository.dart'
    as _i5;
import 'package:guardians_of_nature/data/characters/entities/character.dart'
    as _i3;
import 'package:guardians_of_nature/data/characters/repositories/characters_repository.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCollectionReference_0<T extends Object?> extends _i1.Fake
    implements _i2.CollectionReference<T> {}

class _FakeDocumentReference_1<T extends Object?> extends _i1.Fake
    implements _i2.DocumentReference<T> {}

class _FakeCharacter_2 extends _i1.Fake implements _i3.Character {}

class _Fake$BattleCopyWith_3<$Res> extends _i1.Fake
    implements _i4.$BattleCopyWith<$Res> {}

/// A class which mocks [BattlesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBattlesRepository extends _i1.Mock implements _i5.BattlesRepository {
  MockBattlesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<_i4.Battle> get battlesRef =>
      (super.noSuchMethod(Invocation.getter(#battlesRef),
              returnValue: _FakeCollectionReference_0<_i4.Battle>())
          as _i2.CollectionReference<_i4.Battle>);
  @override
  set userId(String? value) =>
      super.noSuchMethod(Invocation.setter(#userId, value),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.DocumentReference<_i4.Battle>> add({_i4.Battle? battle}) =>
      (super.noSuchMethod(Invocation.method(#add, [], {#battle: battle}),
              returnValue: Future<_i2.DocumentReference<_i4.Battle>>.value(
                  _FakeDocumentReference_1<_i4.Battle>()))
          as _i6.Future<_i2.DocumentReference<_i4.Battle>>);
  @override
  _i6.Future<void> update({_i4.Battle? battle}) =>
      (super.noSuchMethod(Invocation.method(#update, [], {#battle: battle}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Stream<List<_i4.Battle>> watchIdleBattles() =>
      (super.noSuchMethod(Invocation.method(#watchIdleBattles, []),
              returnValue: Stream<List<_i4.Battle>>.empty())
          as _i6.Stream<List<_i4.Battle>>);
  @override
  _i6.Stream<List<_i4.Battle>> watchUserBattles() =>
      (super.noSuchMethod(Invocation.method(#watchUserBattles, []),
              returnValue: Stream<List<_i4.Battle>>.empty())
          as _i6.Stream<List<_i4.Battle>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CharactersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersRepository extends _i1.Mock
    implements _i7.CharactersRepository {
  MockCharactersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<_i3.Character> get charactersRef =>
      (super.noSuchMethod(Invocation.getter(#charactersRef),
              returnValue: _FakeCollectionReference_0<_i3.Character>())
          as _i2.CollectionReference<_i3.Character>);
  @override
  set userId(String? value) =>
      super.noSuchMethod(Invocation.setter(#userId, value),
          returnValueForMissingStub: null);
  @override
  _i6.Stream<List<_i3.Character>> watchCharacters() =>
      (super.noSuchMethod(Invocation.method(#watchCharacters, []),
              returnValue: Stream<List<_i3.Character>>.empty())
          as _i6.Stream<List<_i3.Character>>);
  @override
  _i6.Future<_i2.DocumentReference<_i3.Character>> add(
          {_i3.Character? character}) =>
      (super.noSuchMethod(Invocation.method(#add, [], {#character: character}),
              returnValue: Future<_i2.DocumentReference<_i3.Character>>.value(
                  _FakeDocumentReference_1<_i3.Character>()))
          as _i6.Future<_i2.DocumentReference<_i3.Character>>);
  @override
  _i6.Future<void> update({_i3.Character? character}) => (super.noSuchMethod(
      Invocation.method(#update, [], {#character: character}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Battle].
///
/// See the documentation for Mockito's code generation for more information.
class MockBattle extends _i1.Mock implements _i4.Battle {
  MockBattle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get playerOneId =>
      (super.noSuchMethod(Invocation.getter(#playerOneId), returnValue: '')
          as String);
  @override
  _i3.Character get characterOne =>
      (super.noSuchMethod(Invocation.getter(#characterOne),
          returnValue: _FakeCharacter_2()) as _i3.Character);
  @override
  _i4.BattleStatus get battleStatus =>
      (super.noSuchMethod(Invocation.getter(#battleStatus),
          returnValue: _i4.BattleStatus.idle) as _i4.BattleStatus);
  @override
  int get characterOneHealth => (super
          .noSuchMethod(Invocation.getter(#characterOneHealth), returnValue: 0)
      as int);
  @override
  int get characterTwoHealth => (super
          .noSuchMethod(Invocation.getter(#characterTwoHealth), returnValue: 0)
      as int);
  @override
  _i4.$BattleCopyWith<_i4.Battle> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$BattleCopyWith_3<_i4.Battle>())
          as _i4.$BattleCopyWith<_i4.Battle>);
  @override
  String toString() => super.toString();
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
